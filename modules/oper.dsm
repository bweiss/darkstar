#version 0.3.1
/* $Id$ */
/*
 * oper.dsm - IRC Operator module for DarkStar/EPIC4
 * Copyright (c) 2002, 2003 Brian Weiss
 * See the 'COPYRIGHT' file for more information.
 *
 * This script uses serial numbers 0 and 427 for all /ON hooks.
 */

/****** CLEANUP QUEUE ******/

queue cleanup.oper
{
	^alias -operview
	^alias -operwall
	^on #381 427 -"*"
	^on #hook 427 -"CONFIG OPERVIEW *"
	^on #hook 427 -"CONFIG OPERVIEW_HIDDEN *"
	^on #hook 427 -"CONFIG OPERVIEW_LEVEL *"
	^on #hook 427 -"CONFIG OPERVIEW_SIZE *"
	^on wallop -"*"
	^on #window_create 427 -"*"
	^on #window_kill 427 -"*"
	^on #window_kill 427 -"operview"
	oper.operview.destroy
}


/****** CONFIG/FORMAT VARIABLES ******/

config.add    OPER_UMODES wzsky
config.add -b OPERVIEW 0
config.add -b OPERVIEW_HIDDEN 0
config.add    OPERVIEW_LEVEL opnotes,snotes,wallops
config.add    OPERVIEW_SIZE 5

format.add WALLOP !$1$2! $3-


/****** INIT ******/

/*
 * Force the loading of saved settings early so that
 * the /IF commands in the STARTUP section can use them.
 */
module.load_saved_settings


/****** USER ALIASES ******/

alias operview (...)
{
	if ([$0]) {
		dset OPERVIEW $0
	} else {
		dset OPERVIEW ${CONFIG.OPERVIEW ? 0 : 1}
	}
}

alias operwall (text)
{
	if (text) {
		//quote operwall :$text
	} else {
		xecho -b Usage: /OPERWALL <text>
	}
}


/****** INTERNAL ALIASES ******/

alias oper.operview.create (void)
{
	if (winnum(operview) == -1)
	{
		window new name operview
		oper.operview.fix
	}
}

alias oper.operview.fix (void)
{
	if (winnum(operview) != -1)
	{
		window operview level $CONFIG.OPERVIEW_LEVEL
		if (CONFIG.OPERVIEW_HIDDEN)
		{
			window operview hide

			if (STATUS.DOUBLE) {
				window operview double on
			}
			if ((:item = matchitem(single_status operview)) > -1) {
				@ delitem(single_status $item)
			}
		}{
			/*
			 * Make sure that the operview window is visible but
			 * never becomes the active window.
			 */
			if (!winvisible(operview)) {
				window show operview
			}

			if (winnam() == [operview])
			{
				^local visible
				for wref in ($winrefs())
				{
					if (winvisible($wref)) {
						push visible $wref
					}
				}

				if (#visible == 1)
				{
					window previous
					window show operview
					window last
				}{
					for wref in ($visible)
					{
						if (!match($winnam($wref) operview msgs))
						{
							window refnum $wref
							break
						}
					}
				}
			}

			window operview double off fixed on size $CONFIG.OPERVIEW_SIZE

			if (finditem(single_status operview) < 0) {
				@ setitem(single_status $numitems(single_status) operview)
			}
		}
	}
}

alias oper.operview.destroy (void)
{
	if (winnum(operview) != -1) {
		window operview kill
	}
	if ((:item = matchitem(single_status operview)) > -1) {
		@ delitem(single_status $item)
	}
}


/****** ON HOOKS ******/

on #^381 427 "*"
{
	//mode $servernick() $CONFIG.OPER_UMODES
}

on #-hook 427 "CONFIG OPERVIEW *"
{
	if (CONFIG.OPERVIEW) {
		oper.operview.create
	} else {
		oper.operview.destroy
	}
}

on #-hook 427 "CONFIG OPERVIEW_HIDDEN *"
{
	oper.operview.fix
}

on #-hook 427 "CONFIG OPERVIEW_LEVEL *"
{
	@ :bad = :good = []
	@ :levels = [ACTIONS CRAP CTCP DCC MSGS NOTES NOTICES OPNOTES PUBLIC SNOTES USERLOG1 USERLOG2 USERLOG3 USERLOG4 WALLOPS WALLS]
	for lvl in ($split(, $CONFIG.OPERVIEW_LEVEL))
	{
		if (findw($lvl $levels) > -1) {
			push good $lvl
		} else {
			push bad $lvl
		}
	}

	if (bad)
	{
		for lvl in ($bad) {
			xecho -b Unknown level: $toupper($lvl)
		}
		xecho -b Valid levels: $levels
		if (good) {
			@ :newlevels = unsplit(, $good)
		} else {
			@ :newlevels = [$2-]
		}
		^assign CONFIG.OPERVIEW_LEVEL $toupper($newlevels)
		xecho -b Value of OPERVIEW_LEVEL set to $CONFIG.OPERVIEW_LEVEL
	}{
		^assign CONFIG.OPERVIEW_LEVEL $toupper($CONFIG.OPERVIEW_LEVEL)
	}

	if (CONFIG.OPERVIEW) {
		window operview level $CONFIG.OPERVIEW_LEVEL
	}
}

on #-hook 427 "CONFIG OPERVIEW_SIZE *"
{
	@ :size = CONFIG.OPERVIEW_SIZE
	@ :max_size = word(1 $geom()) - 4
	if (!isnumber($size b10) || size < 1 || size > max_size)
	{
		xecho -b Value must be an integer greater than 0 and no larger than $max_size
		^assign CONFIG.OPERVIEW_SIZE $2
		xecho -b Value of OPERVIEW_SIZE set to $CONFIG.OPERVIEW_SIZE
	}
	if (CONFIG.OPERVIEW && !CONFIG.OPERVIEW_HIDDEN) {
		window operview size $CONFIG.OPERVIEW_SIZE
	}
}

on ^wallop "*"
{
	if (FORMAT.WALLOP) {
		echo $fparse(WALLOP $*)
	}
}

on #-window_create 427 "*"
{
	oper.operview.fix
}

on #-window_kill 427 "*"
{
	oper.operview.fix
}

on #-window_kill 427 "operview"
{
    if (CONFIG.OPERVIEW) {
        dset OPERVIEW OFF
    }
}


/****** STARTUP ******/

if (CONFIG.OPERVIEW) {
	oper.operview.create
}


/* EOF */