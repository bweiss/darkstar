#version 0.10
/* $Id$ */
/*
 * window.dsm - Window module for DarkStar/EPIC4
 * Copyright (c) 2002, 2003 Brian Weiss
 * See the 'COPYRIGHT' file for more information.
 *
 * This script uses serial number 426 for all /ON hooks.
 * The msg window attempts to use a refnum of 426.
 */

/****** CLEANUP QUEUE ******/

queue cleanup.window
{
	for alias in (swap wb wc wj wk wl wn wp wq wub) {
		^alias -$alias
	}
	for wref in ($winrefs()) {
		^alias -$wref
	}

	^on #hook 426 -"CONFIG MSG_WINDOW *"
	^on #hook 426 -"CONFIG MSG_WINDOW_HIDDEN *"
	^on #hook 426 -"CONFIG MSG_WINDOW_LEVEL *"
	^on #hook 426 -"CONFIG MSG_WINDOW_SIZE *"
	^on #join 426 -'\$servernick() *'
	^on #leave 426 -'\$servernick() *'
	^on #msg 426 -"*"
	^on #window_create 426 -"*"
	^on #window_kill 426 -"*"
	^on #window_kill 426 -"msgs"

	^bind ^R nothing
	^bind ^W next_window
	for char in ($jot(0 9)) {
		^bind ^[$char nothing
	}
	for keyb in (^[^I ^[[1~ ^[[4~ ^[^[[5~ ^[^[[6~) {
		^bind $keyb nothing
	}
	^bind -symbolic key_f12 nothing

	window.msgwin.destroy
}


/****** CONFIG/FORMAT VARIABLES ******/

addconfig    AUTO_BIND_CHANNELS
addconfig    AUTO_CREATE_WINDOWS 2
addconfig -b AUTO_QUERY 0
addconfig -b AUTO_QUERY_UPDATE 1
addconfig -b BIND_ON_JOIN 0
addconfig -b JOIN_NEW_WINDOW 0
addconfig    JOIN_NEW_WINDOW_ARGS hide_others
addconfig -b MSG_WINDOW 0
addconfig -b MSG_WINDOW_HIDDEN 0
addconfig    MSG_WINDOW_LEVEL MSGS
addconfig    MSG_WINDOW_SIZE 5
addconfig -b PART_KILL_WINDOW 0
addconfig -b UNBIND_ON_PART 0


/****** INIT ******/

/*
 * Key bindings.
 */

^bind ^R next_window
^bind ^W delete_previous_word

^bind ^[^I parse_command ^window next
^bind ^[1 parse_command ^window swap 1
^bind ^[2 parse_command ^window swap 2
^bind ^[3 parse_command ^window swap 3
^bind ^[4 parse_command ^window swap 4
^bind ^[5 parse_command ^window swap 5
^bind ^[6 parse_command ^window swap 6
^bind ^[7 parse_command ^window swap 7
^bind ^[8 parse_command ^window swap 8
^bind ^[9 parse_command ^window swap 9
^bind ^[0 parse_command ^window swap 10

/* Home/End on some terminals */
^bind ^[[1~ scroll_start
^bind ^[[4~ scroll_end

/* Esc + PgUp/PgDn */
^bind ^[^[[5~ parse_command window.last.scroll backward
^bind ^[^[[6~ parse_command window.last.scroll forward

^bind -symbolic key_f12 parse_command window.last.clear

/*
 * Add shortcut aliases for all existing windows.
 */
for wref in ($winrefs()) {
	^alias $wref window swap $wref
}


/****** USER ALIASES ******/

alias swap (winnum, void)
{
	if (winnum)
	{
		window swap $winnum
	}{
		input "What window should we swap to? " {
			window swap $0
		}
	}
}

alias wb  (chan default "$C", void)  { window bind $chan; }
alias wc  (void)                     { window new_hide swap last; }
alias wj  (...)                      { window new_hide swap last channel "$*"; }
alias wk  (...)                      { window kill; }
alias wl  (...)                      { window last; }
/* Perhaps this should create a new window, instead of doing /window next? */
alias wn  (...)                      { window next; }
alias wns (...)                      { window new_hide swap last server $*; }
alias wp  (...)                      { window previous; }
alias wq  (...)                      { window new_hide swap last query $nick; }
alias wub (...)                      { window unbind; }


/****** INTERNAL ALIASES ******/

alias window.last.clear (void)
{
	window last
	window clear
	window last
}

alias window.last.scroll (direction, void)
{
	if (!direction) {
		return
	}
	window last
	parsekey scroll_$direction
	window last
}

alias window.msgwin.create (void)
{
	if (winnum(msgs) == -1)
	{
		window new name msgs number 426
		window.msgwin.fix
	}
}

alias window.msgwin.destroy (void)
{
	if (winnum(msgs) != -1) {
		window msgs kill
	}
}

alias window.msgwin.fix (void)
{
	if (winnum(msgs) == -1) {
		return
	}

	window msgs level $CONFIG.MSG_WINDOW_LEVEL

	if (CONFIG.MSG_WINDOW_HIDDEN)
	{
		window msgs hide
	}{
		/*
		 * Make sure that the msg window is visible but inactive.
		 */
		if (!winvisible(msgs)) {
			window show msgs
		}

		if (winnam() == [msgs])
		{
			^local visible
			for wref in ($winrefs())
			{
				if (winvisible($wref)) {
					push visible $wref
				}
			}

			if (#visible == 1)
			{
				window previous
				window show msgs
				window last
			}{
				for wref in ($visible)
				{
					if (!match($winnam($wref) msgs operview))
					{
						window refnum $wref
						break
					}
				}
			}
		}

		window msgs double off fixed on skip on size $CONFIG.MSG_WINDOW_SIZE
	}
}


/****** ON HOOKS ******/

on #-hook 426 "CONFIG MSG_WINDOW *"
{
	if (CONFIG.MSG_WINDOW) {
		window.msgwin.create
	} else {
		window.msgwin.destroy
	}
}

on #-hook 426 "CONFIG MSG_WINDOW_HIDDEN *"
{
	window.msgwin.fix
}
		
on #-hook 426 "CONFIG MSG_WINDOW_LEVEL *"
{
	@ :bad = :good = []
	@ :levels = [ACTIONS CRAP CTCP DCC MSGS NOTES NOTICES OPNOTES PUBLIC SNOTES USERLOG1 USERLOG2 USERLOG3 USERLOG4 WALLOPS WALLS]
	for lvl in ($split(, $CONFIG.MSG_WINDOW_LEVEL))
	{
		if (findw($lvl $levels) > -1) {
			push good $lvl
		} else {
			push bad $lvl
		}
	}

	if (bad)
	{
		for lvl in ($bad) {
			xecho -b Unknown level: $toupper($lvl)
		}
		xecho -b Valid levels: $levels
		if (good) {
			@ :newlevels = unsplit(, $good)
		} else {
			@ :newlevels = [$2-]
		}
		^assign CONFIG.MSG_WINDOW_LEVEL $toupper($newlevels)
		xecho -b Value of MSG_WINDOW_LEVEL set to $CONFIG.MSG_WINDOW_LEVEL
	}{
		^assign CONFIG.MSG_WINDOW_LEVEL $toupper($CONFIG.MSG_WINDOW_LEVEL)
	}

	if (CONFIG.MSG_WINDOW) {
		window msgs level $CONFIG.MSG_WINDOW_LEVEL
	}
}

on #-hook 426 "CONFIG MSG_WINDOW_SIZE *"
{
	@ :size = CONFIG.MSG_WINDOW_SIZE
	@ :max_size = word(1 $geom()) - 4
	if (!isnumber($size b10) || size < 1 || size > max_size)
	{
		xecho -b Value must be an integer greater than 0 and no larger than $max_size
		^assign CONFIG.MSG_WINDOW_SIZE $2
		xecho -b Value of MSG_WINDOW_SIZE set to $CONFIG.MSG_WINDOW_SIZE
	}
	if (CONFIG.MSG_WINDOW && !CONFIG.MSG_WINDOW_HIDDEN) {
		window msgs size $CONFIG.MSG_WINDOW_SIZE
	}
}

on #-join 426 '$servernick() *'
{
	@ :curwin = winnum()
	if (CONFIG.JOIN_NEW_WINDOW)
	{
		window new channel $1
		if (CONFIG.BIND_ON_JOIN) {
			window bind $1
		}
		window $CONFIG.JOIN_NEW_WINDOW_ARGS
		window.msgwin.fix
	}
}

on #-leave 426 '$servernick() *'
{
	if (CONFIG.UNBIND_ON_PART) {
		window unbind $1
	}
	if (CONFIG.PART_KILL_WINDOW) {
		window $winchan($1) kill
	}
}

on #-msg 426 "*"
{
	if ((:item = matchitem(window.queries.$lastserver() %!$userhost())) > -1)
	{
		if (getitem(window.queries.$lastserver() $item) != [$0!$userhost()])
		{
			if (CONFIG.AUTO_QUERY_UPDATE)
			{
				@ :oldnick = before(-1 ! $getitem(window.queries.$lastserver() $item))
				if ((:win = querywin($oldnick $lastserver())) > -1)
				{
					window $win query $0
					xecho -b -w $win Query window for $oldnick changed to $0
				}
			}
			@ setitem(window.queries.$lastserver() $item $0!$userhost())
		}
	}{
		@ setitem(window.queries.$lastserver() $numitems(window.queries.$lastserver()) $0!$userhost())
	}

	if (CONFIG.AUTO_QUERY && querywin($0 $lastserver()) == -1)
	{
		window new_hide swap last
		query $0
		xecho -b New query window created for $0
	}
}

on #-window_create 426 "*"
{
	^alias $0 window swap $0
	window.msgwin.fix
}

on #-window_kill 426 "*"
{
	^alias -$0
	window.msgwin.fix
}

on #-window_kill 426 "msgs"
{
	if (CONFIG.MSG_WINDOW) {
		dset MSG_WINDOW OFF
	}
}


/****** STARTUP ******/

module.load_saved_settings

if (CONFIG.AUTO_CREATE_WINDOWS)
{
	for ii from 1 to $CONFIG.AUTO_CREATE_WINDOWS
	{
		@ :chan = word($ii $CONFIG.AUTO_BIND_CHANNELS)
		if (winnum($ii) == -1) {
			window new
			if (chan) {
				window bind $chan
			}
			window hide
		}
	}
}

if (CONFIG.MSG_WINDOW) {
	window.msgwin.create
}


/* EOF */