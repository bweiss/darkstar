#version 0.3.2
/* $Id$ */
/*
 * window.dsm - Window module for Darkstar/EPIC4
 *
 * Written by Brian Weiss
 * Copyright (c) 2002 Brian Weiss
 * See the 'COPYRIGHT' file for more information.
 *
 * This script uses serial number 426 for all /on hooks.
 */

queue cleanup.window
{
	for alias in (swap wb wc wj wk wl wn wp wub)
	{
		^alias -$alias
	}

	^on #hook 426 -"CONFIG MSG_WINDOW *"
	^on #hook 426 -"CONFIG MSG_WINDOW_LEVEL *"
	^on #hook 426 -"CONFIG MSG_WINDOW_SIZE *"
	^on #join 426 -'\$servernick() *'
	^on #leave 426 -'\$servernick() *'
	^on #window_kill 426 -"msgs"
	^on #window_kill 426 -"*"

	if (winnum(msgs) != -1)
	{
		^window msgs kill
	}

	for char in ($jot(0 9))
	{
		^bind META1-$char NOTHING
	}

	for char in (n p h c k $jot(0 9))
	{
		^bind META8-$char NOTHING
	}

	for keyb in (META1-^I META5-~ META6-~ META10-~ META11-~ META12-~ META13-~)
	{
		^bind $keyb NOTHING
	}

	^bind ^W NEXT_WINDOW
	^bind ^X META2_CHARACTER
	^bind META2-1 META32_CHARACTER
	^bind META2-2 META39_CHARACTER
	^bind META2-3 META38_CHARACTER
	^bind META2-4 META33_CHARACTER
	^bind META2-5 META30_CHARACTER
	^bind META2-6 META31_CHARACTER

	for item in ($getrmatches(single_status msgs))
	{
		@ delitem(single_status $item)
	}
}


config.add    AUTO_BIND_CHANNELS
config.add -b AUTO_BIND_ON_JOIN 0
config.add    AUTO_CREATE_WINDOW_ARGS double on hide
config.add    AUTO_CREATE_WINDOWS 10
config.add -b AUTO_UNBIND_ON_PART 0
config.add -b MSG_WINDOW 0
config.add    MSG_WINDOW_LEVEL msgs,opnotes,wallops
config.add    MSG_WINDOW_SIZE 5

/*
 * Make sure the msg window is exempt from status double being turned on.
 * This will only work for status files that are aware of this. Currently
 * both the 'darkstar' and 'feedback' status bars support this.
 */
@ setitem(single_status $numitems(single_status) msgs)


^bind ^W META8_CHARACTER
^bind ^X SWITCH_CHANNELS
^bind META1-^I parse_command ^window next
^bind META1-1 PARSE_COMMAND ^window swap 1
^bind META1-2 PARSE_COMMAND ^window swap 2
^bind META1-3 PARSE_COMMAND ^window swap 3
^bind META1-4 PARSE_COMMAND ^window swap 4
^bind META1-5 PARSE_COMMAND ^window swap 5
^bind META1-6 PARSE_COMMAND ^window swap 6
^bind META1-7 PARSE_COMMAND ^window swap 7
^bind META1-8 PARSE_COMMAND ^window swap 8
^bind META1-9 PARSE_COMMAND ^window swap 9
^bind META1-0 PARSE_COMMAND ^window swap 10
^bind META2-1 META10_CHARACTER
^bind META2-2 META12_CHARACTER
^bind META2-3 META13_CHARACTER
^bind META2-4 META11_CHARACTER
^bind META2-5 META5_CHARACTER
^bind META2-6 META6_CHARACTER
^bind META5-~ SCROLL_BACKWARD
^bind META6-~ SCROLL_FORWARD
^bind META8-n PARSE_COMMAND ^window next
^bind META8-p PARSE_COMMAND ^window previous
^bind META8-h PARSE_COMMAND ^window hide
^bind META8-c PARSE_COMMAND ^window new double on
^bind META8-k PARSE_COMMAND ^window kill
^bind META8-1 PARSE_COMMAND ^window swap 1
^bind META8-2 PARSE_COMMAND ^window swap 2
^bind META8-3 PARSE_COMMAND ^window swap 3
^bind META8-4 PARSE_COMMAND ^window swap 4
^bind META8-5 PARSE_COMMAND ^window swap 5
^bind META8-6 PARSE_COMMAND ^window swap 6
^bind META8-7 PARSE_COMMAND ^window swap 7
^bind META8-8 PARSE_COMMAND ^window swap 8
^bind META8-9 PARSE_COMMAND ^window swap 9
^bind META8-0 PARSE_COMMAND ^window swap 10
^bind META10-~ SCROLL_START
^bind META11-~ SCROLL_END
^bind META12-~ PARSE_COMMAND window.msgwin_up
^bind META13-~ PARSE_COMMAND window.msgwin_down
^bind -symbolic key_f11 TOGGLE_INSERT_MODE
^bind -symbolic key_f12 PARSE_COMMAND window msgs clear


/* Force the loading of saved settings early so the two /if statements
   below will work. */
module.load_saved_settings


if (CONFIG[AUTO_CREATE_WINDOWS])
{
	for cnt from 0 to $CONFIG.AUTO_CREATE_WINDOWS
	{
		@ :autobind_chan = word($cnt $CONFIG.AUTO_BIND_CHANNELS)
		@ :win = cnt + 1

		if (winnum($win) == -1)
		{
			window new $CONFIG.AUTO_CREATE_WINDOW_ARGS
		}
		
		if (autobind_chan)
		{
			window $win bind $autobind_chan
		}
	}
}

if (CONFIG[MSG_WINDOW])
{
	if (winnum(msgs) == -1)
	{
		window new name msgs
		window size $CONFIG.MSG_WINDOW_SIZE
		window level $CONFIG.MSG_WINDOW_LEVEL
		window last
	}
}


alias swap (winnum, void)
{
	if (winnum)
	{
		window swap $winnum
	}{
		input "What window should we swap to? "
		{
			window swap $0
		}
	}
}

alias wb (chan default "$C", void)
{
	window bind $chan
}

alias wc (void)
{
	window new_hide swap last
	if (STATUS[DOUBLE])
	{
		window double on
	}
}

alias wj (chan)
{
	if (!chan)
	{
		xecho -b Usage: /wj <channel> [key]
		return
	}

	window new_hide swap last
	join $chan
	if (STATUS[DOUBLE])
	{
		window double on
	}
}

alias wk (void)
{
	window kill
}

alias wl (void)
{
	window last
}

alias wn (void)
{
	window next
}

alias wp (void)
{
	window previous
}

alias wub (void)
{
	window unbind
}


alias window.msgwin_up (void)
{
	@ :cwin = winnum()
	^window ref msgs
	parsekey SCROLL_BACKWARD
	^window ref $cwin
}

alias window.msgwin_down (void)
{
	@ :cwin = winnum()
	^window ref msgs
	parsekey SCROLL_FORWARD
	^window ref $cwin
}


/*
 * Kill or create msg window on /dset MSG_WINDOW
 */
on #-hook 426 "CONFIG MSG_WINDOW *"
{
	if (CONFIG[MSG_WINDOW])
	{
		if (winnum(msgs) == -1)
		{
			window new name msgs
			window level $CONFIG.MSG_WINDOW_LEVEL
			window size $CONFIG.MSG_WINDOW_SIZE
			window last
		}
	}{
		if (winnum(msgs) != -1)
		{
			window msgs kill
		}
	}
}

on #-hook 426 "CONFIG MSG_WINDOW_LEVEL *"
{
	if (CONFIG[MSG_WINDOW])
	{
		window msgs level $CONFIG.MSG_WINDOW_LEVEL
	}
}

on #-hook 426 "CONFIG MSG_WINDOW_SIZE *"
{
	if (CONFIG[MSG_WINDOW])
	{
		window msgs size $CONFIG.MSG_WINDOW_SIZE
	}
}

on #-join 426 '$servernick() *'
{
	if (CONFIG[AUTO_BIND_ON_JOIN])
	{
		window bind $1
	}
}

on #-leave 426 '$servernick() *'
{
	if (CONFIG[AUTO_UNBIND_ON_PART])
	{
		window unbind $1
	}
}

on #-window_kill 426 "msgs"
{
	if (CONFIG[MSG_WINDOW])
	{
		dset MSG_WINDOW OFF
	}
}

on #-window_kill 426 "*"
{
	if (CONFIG[MSG_WINDOW])
	{
		window previous
		window show msgs
		window size $CONFIG.MSG_WINDOW_SIZE
		window last
	}
}


/* EOF */