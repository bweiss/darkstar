#version 0.6.1
/* $Id$ */
/*
 * window.dsm - Window module for DarkStar/EPIC4
 * Copyright (c) 2002 Brian Weiss
 * See the 'COPYRIGHT' file for more information.
 *
 * This script uses serial number 426 for all /on hooks.
 */

/****** CLEANUP QUEUE ******/

queue cleanup.window
{
	for alias in (swap wb wc wj wk wl wn wp wub) {
		^alias -$alias
	}
	for wref in ($winrefs()) {
		^alias -$wref
	}

	^on #hook 426 -"CONFIG MSG_WINDOW *"
	^on #hook 426 -"CONFIG MSG_WINDOW_LEVEL *"
	^on #hook 426 -"CONFIG MSG_WINDOW_SIZE *"
	^on #join 426 -'\$servernick() *'
	^on #leave 426 -'\$servernick() *'
	^on #msg 426 -"*"
	^on #window_create 426 -"*"
	^on #window_kill 426 -"msgs"
	^on #window_kill 426 -"*"

	for char in ($jot(0 9)) {
		^bind ^[$char NOTHING
	}
	for keyb in (^[^I ^[[1~ ^[[2~ ^[[3~ ^[[4~ ^[[5~ ^[[6~) {
		^bind $keyb NOTHING
	}
	^bind ^W NEXT_WINDOW
	^bind ^X SELF_INSERT
	^bind -symbolic key_f11 NOTHING
	^bind -symbolic key_f12 NOTHING
	^bind ^[[7~ NOTHING
	^bind ^[[8~ NOTHING

	for item in ($getrmatches(single_status msgs)) {
		@ delitem(single_status $item)
	}
	if (winnum(msgs) != -1) {
		^window msgs kill
	}
}


/****** CONFIG/FORMAT VARIABLES ******/

config.add    AUTO_BIND_CHANNELS
config.add    AUTO_CREATE_WINDOWS 2
config.add -b AUTO_QUERY 0
config.add -b BIND_ON_JOIN 0
config.add -b MSG_WINDOW 0
config.add    MSG_WINDOW_LEVEL MSGS,OPNOTES,WALLOPS
config.add    MSG_WINDOW_SIZE 5
config.add -b UNBIND_ON_PART 0


/****** INIT ******/

/*
 * Add "msgs" to the single_status array to prevent the msg window
 * from having double turned on.
 */
@ setitem(single_status $numitems(single_status) msgs)

/*
 * Key bindings.
 */
^bind ^X SWITCH_CHANNELS
^bind ^[^I PARSE_COMMAND ^window next
^bind ^[1 PARSE_COMMAND ^window swap 1
^bind ^[2 PARSE_COMMAND ^window swap 2
^bind ^[3 PARSE_COMMAND ^window swap 3
^bind ^[4 PARSE_COMMAND ^window swap 4
^bind ^[5 PARSE_COMMAND ^window swap 5
^bind ^[6 PARSE_COMMAND ^window swap 6
^bind ^[7 PARSE_COMMAND ^window swap 7
^bind ^[8 PARSE_COMMAND ^window swap 8
^bind ^[9 PARSE_COMMAND ^window swap 9
^bind ^[0 PARSE_COMMAND ^window swap 10
^bind ^[[1~ SCROLL_START
^bind ^[[2~ PARSE_COMMAND window.msgwin_up
^bind ^[[3~ PARSE_COMMAND window.msgwin_down
^bind ^[[4~ SCROLL_END
^bind ^[[5~ SCROLL_BACKWARD
^bind ^[[6~ SCROLL_FORWARD
^bind ^W DELETE_PREVIOUS_WORD
^bind -symbolic key_f11 TOGGLE_INSERT_MODE
^bind -symbolic key_f12 PARSE_COMMAND if (winnum(msgs) != -1) {window msgs clear}
^bind ^[[7~ SCROLL_START
^bind ^[[8~ SCROLL_END

/*
 * Force the loading of saved settings early so that
 * the /IF commands in the STARTUP section can use them.
 */
module.load_saved_settings

/*
 * Add shortcut aliases for all existing windows.
 */
for wref in ($winrefs()) {
	^alias $wref window swap $wref
}


/****** USER ALIASES ******/

alias swap (winnum, void)
{
	if (winnum) {
		window swap $winnum
	} else {
		input "What window should we swap to? " {
			window swap $0
		}
	}
}

/*
 * We use the "new_hide" verb instead of "new" and "hide" to keep
 * the msg window from being resized when creating new windows.
 */
alias wb  (chan default "$C", void) {window bind $chan}
alias wc  (void)                    {window new_hide swap last}
alias wj  (...)                     {window new_hide swap last channel "$*"}
alias wk  (...)                     {window kill}
alias wl  (...)                     {window last}
alias wn  (...)                     {window next}
alias wp  (...)                     {window previous}
alias wq  (...)                     {window new_hide swap last query $nick}
alias wub (...)                     {window unbind}


/****** INTERNAL ALIASES ******/

alias window.msgwin_up (void)
{
	@:win = winnum()
	^window ref msgs
	parsekey SCROLL_BACKWARD
	^window ref $win
}

alias window.msgwin_down (void)
{
	@:win = winnum()
	^window ref msgs
	parsekey SCROLL_FORWARD
	^window ref $win
}


/****** ON HOOKS ******/

/*
 * Kill or create msg window on /DSET MSG_WINDOW
 */
on #-hook 426 "CONFIG MSG_WINDOW *"
{
	if (CONFIG.MSG_WINDOW) {
		if (winnum(msgs) == -1) {
			window new name msgs double off
			window level $CONFIG.MSG_WINDOW_LEVEL
			window size $CONFIG.MSG_WINDOW_SIZE
			window last
		}
	} else {
		if (winnum(msgs) != -1) {
			window msgs kill
		}
	}
}

on #-hook 426 "CONFIG MSG_WINDOW_LEVEL *"
{
	^local good
	^local bad
	@:levels = [ACTIONS CRAP CTCP DCC MSGS NOTES NOTICES OPNOTES PUBLIC SNOTES USERLOG1 USERLOG2 USERLOG3 USERLOG4 WALLOPS WALLS]

	for lvl in ($sar(ig/,/ /$CONFIG.MSG_WINDOW_LEVEL)) {
		if (findw($lvl $levels) > -1) {
			push good $lvl
		} else {
			push bad $lvl
		}
	}

	if (bad) {
		for lvl in ($bad) {
			xecho -b Unknown level: $lvl
		}
		xecho -b Valid levels: $levels
		if (good) {
			@:newlevels = sar(ig/ /,/$good)
		} else {
			@:newlevels = *2-
		}
		^assign CONFIG.MSG_WINDOW_LEVEL $toupper($newlevels)
		xecho -b Value of MSG_WINDOW_LEVEL set to $CONFIG.MSG_WINDOW_LEVEL
	} else {
		^assign CONFIG.MSG_WINDOW_LEVEL $toupper($CONFIG.MSG_WINDOW_LEVEL)
	}

	if (CONFIG.MSG_WINDOW) {
		window msgs level $CONFIG.MSG_WINDOW_LEVEL
	}
}

on #-hook 426 "CONFIG MSG_WINDOW_SIZE *"
{
	@:size = CONFIG.MSG_WINDOW_SIZE
	@:max_size = word(1 $geom()) - 4
	if (!isnumber($size b10) || size < 1 || size > max_size) {
		xecho -b Value must be an integer greater than zero and no larger than the largest possible window
		^assign CONFIG.MSG_WINDOW_SIZE $2
		xecho -b Value of MSG_WINDOW_SIZE set to $CONFIG.MSG_WINDOW_SIZE
	}

	if (CONFIG.MSG_WINDOW) {
		window msgs size $CONFIG.MSG_WINDOW_SIZE
	}
}

on #-join 426 '$servernick() *'
{
	if (CONFIG.BIND_ON_JOIN) {
		window bind $1
	}
}

on #-leave 426 '$servernick() *'
{
	if (CONFIG.UNBIND_ON_PART) {
		window unbind $1
	}
}

on #-msg 426 "*"
{
	if (CONFIG.AUTO_QUERY)
	{
		@:item = matchitem(window.autoquery %!$userhost())
		if (item > -1) {
			if (getitem(window.autoquery $item) != [$0!$userhost()]) {
				@:oldnick = before(-1 ! $getitem(window.autoquery $item))
				@:win = querywin($oldnick $lastserver())
				if (win > -1) {
					window $win query $0
				}
				@ setitem(window.autoquery $item $0!$userhost())
				xecho -b -w $win Query window for $oldnick changed to $0
			}
		}

		@ setitem(window.autoquery $numitems(window.autoquery) $0!$userhost())

		if (querywin($0 $lastserver()) == -1) {
			window new_hide swap last
			query $0
			xecho -b New query window created for $0
		}
	}
}

on #-window_create 426 "*"
{
	/* Add a shortcut alias for this window */
	^alias $0 window swap $0

	if (STATUS.DOUBLE) {
		^window $0 double on
	}
}

/*
 * Turn off MSG_WINDOW if someone manually kills the 'msgs' window.
 */
on #-window_kill 426 "msgs"
{
	if (CONFIG.MSG_WINDOW) {
		dset MSG_WINDOW OFF
	}
}

on #-window_kill 426 "*"
{
	/* Remove shortcut alias for this window */
	^alias -$0

	/* Reset the msgs window */
	if (CONFIG.MSG_WINDOW) {
		window previous
		window show msgs
		window size $CONFIG.MSG_WINDOW_SIZE
		window last
	}
}


/****** STARTUP ******/

/*
 * Create some windows when the module loads.
 */
if (CONFIG.AUTO_CREATE_WINDOWS)
{
	for cnt from 1 to $CONFIG.AUTO_CREATE_WINDOWS {
		@:autobind_chan = word($cnt $CONFIG.AUTO_BIND_CHANNELS)
		if (winnum($cnt) == -1) {
			window new
		}
		if (autobind_chan) {
			window bind $autobind_chan
		}
		window hide
	}
}

if (CONFIG.MSG_WINDOW)
{
	if (winnum(msgs) == -1) {
		window new name msgs double off
		window size $CONFIG.MSG_WINDOW_SIZE
		window level $CONFIG.MSG_WINDOW_LEVEL
		window last
	}
}


/* EOF */