#version 0.2
/* $Id$ */
/*
 * relay.dsm -  Relay module for DarkStar/EPIC4
 *
 * Written by Brian Weiss
 * Copyright (c) 2002 Brian Weiss
 * See the 'COPYRIGHT' file for more information.
 *
 * This script uses serial number 451 for all /on hooks.
 */

/****** CLEANUP QUEUE ******/

queue cleanup.relay
{
	for alias in (clearrelaybuf relay relm reln relsm relsn) {
		^alias -$alias
	}
	for array in ($pattern(relay.* $getarrays())) {
		@ delarray($array)
	}
	for hook in (msg notice send_msg send_notice) {
		^on #$hook 451 -"*"
	}
}


/****** CONFIG/FORMAT VARIABLES ******/

config.add RELAY_BUFFER_SIZE 10


/****** USER ALIASES ******/

alias clearrelaybuf (void)
{
	for array in ($pattern(relay.* $getarrays())) {
		@ delarray($array)
	}
}

alias relay (type, ...)
{
	if (!type) {
		xecho -b Usage: /relay <-m|-n|-sm|-sn> [-list|<item#> [<target>]]
		return
	}

	switch ($tolower($type)) {
		(-m)  {
			echo relay.show msg $*
			relay.show msg $*
		}
		(-n)  {relay.show notice $*}
		(-sm) {relay.show sent_msg $*}
		(-sn) {relsn.show sent_notice $*}
	}
}

alias relm (...)
{
	relay -m $*
}

alias reln (...)
{
	relay -n $*
}

alias relsm (...)
{
	relay -sm $*
}

alias relsn (...)
{
	relay -sn $*
}


/****** INTERNAL ALIASES ******/

alias relay.show (type, ...)
{
	if (!type) {
		xecho -b Error: relay.show: Not enough arguments
		return
	}

	switch ($tolower($type))
	{
		(msg) {
			@ :array = [relay.msgs]
			@ :format = [MSG]
		}
		(notice) {
			@ :array = [relay.notices]
			@ :format = [NOTICE]
		}
		(sent_msg) {
			@ :array = [relay.sent_msgs]
			@ :format = [SEND_MSG]
		}
		(sent_notice) {
			@ :array = [relay.sent_notices]
			@ :format = [SEND_NOTICE]
		}
		(*) {xecho -b Error: relay.show: Invalid type}
	}

	if (pattern(-l% $0)) {
		relay.showarray $array $format
		return
	} else if ([$0] == []) {
		@ :inum = numitems($array) - 1
	} else if ([$0] < 0 || [$0] >= numitems($array)) {
		xecho -b Error: relay.show: Item number out of range
		return
	} else {
		@ :inum = [$0]
	}

	if (![$1]) {
		@ :target = T
	} else {
		@ :target = [$1]
	}

	msg $target $fparse($format $getitem($array $inum))
}

/*
 * relay.showarray <array> <format>
 * Displays the contents of <array> after being passed
 * through $fparse(<format> ...)
 */
alias relay.showarray (array, format, void)
{
	if (!array || !format) {
		xecho -b Error: relay.showarray: Not enough arguments
		return
	}
	echo Item# Value
	for cnt from 0 to ${numitems($array) - 1} {
		echo  $[4]cnt $fparse($format $getitem($array $cnt))
	}
}


/****** ON HOOKS ******/

on #-msg 451 "*"
{
	if (numitems(relay.msgs) >= CONFIG.RELAY_BUFFER_SIZE) {
		@ delitem(relay.msgs 0)
	}
	@ setitem(relay.msgs $numitems(relay.msgs) $0 $userhost() $1-)
}

on #-notice 451 "*"
{
	if (numitems(relay.notices) >= CONFIG.RELAY_BUFFER_SIZE) {
		@ delitem(relay.notices 0)
	}
	@ setitem(relay.notices $numitems(relay.notices) $0 $userhost() $1-)
}

on #-send_msg 451 "*"
{
	if (numitems(relay.sent_msgs) >= CONFIG.RELAY_BUFFER_SIZE) {
		@ delitem(relay.sent_msgs 0)
	}
	@ setitem(relay.sent_msgs $numitems(relay.sent_msgs) $*)
}

on #-send_notice 451 "*"
{
	if (numitems(relay.sent_notices) >= CONFIG.RELAY_BUFFER_SIZE) {
		@ delitem(relay.sent_notices 0)
	}
	@ setitem(relay.sent_notices $numitems(relay.sent_notices) $*)
}



/* EOF */