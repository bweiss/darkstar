#version 1.2.2
/* $Id$ */
/*
 * away.dsm - Away module for Darkstar/EPIC4
 *
 * Written by Brian Weiss
 * Copyright © 2002 Brian Weiss
 * See the 'COPYRIGHT' file for more information.
 *
 * This script uses serial number 421 for all /on hooks.
 */

queue cleanup.away
{
	for alias in (readlog remlog)
	{
		^alias -$alias
	}

	^on #305 421 -"*"
	^on #306 421 -"*"
	^on #msg 421 -"*"
	^on #notice 421 -"*"
	^on #input 421 -"*"
	^on #timer 421 -"*"

	@ delarray(sent_away)
}


config.add -b AUTO_AWAY 1
config.add    AUTO_AWAY_TIME 1200
config.add -b AUTO_UNSET_AWAY 0
config.add -b AWAY_LOG 1
config.add    AWAY_LOGFILE ~/.darkstar/away.log
config.add -b PUBLIC_AWAY 0
config.add    PUBLIC_AWAY_CHANNELS
config.add -b SEND_AWAY_NOTICE 1


/*
 * Timestamp for last user input. Needed for auto-away.
 */
@ AWAY.LAST_INPUT = time()

/*
 * If we're already away when the module is loaded, create a timestamp.
 * This won't be accurate, of course, but it's better than nothing.
 */
if (A)
{
	@ AWAY.TIME = time()
}


/*
 * /READLOG [filename]
 * Displays your away log to the current window using /LESS.
 */
alias readlog (file default "$CONFIG.AWAY_LOGFILE", void)
{
	^assign -AWAY.NEWMSGS

	if (fexist($file) == 1)
	{
		less $file
	}{
		xecho -b Logfile [$file] does not exist.
	}
}

/*
 * /REMLOG [filename]
 * Removes your away log.
 */
alias remlog (file default "$CONFIG.AWAY_LOGFILE", void)
{
	^assign -AWAY.NEWMSGS

	if (fexist($file))
	{
		@ unlink($file)
		xecho -b Removed logfile [$file]
	}{
		xecho -b Logfile [$file] does not exist.
	}	
}


/*
 * You have set yourself away.
 */
on #-306 421 "*"
{
	if (CONFIG[PUBLIC_AWAY])
	{
		if (CONFIG[PUBLIC_AWAY_CHANNELS])
		{
			for chan in ($CONFIG.PUBLIC_AWAY_CHANNELS)
			{
				if (match($chan $mychannels()))
				{
					describe $chan is away: $A [Log/${CONFIG[AWAY_LOG] ? [ON] : [OFF]}]
				}
			}
		}{
			for chan in ($mychannels())
			{
				describe $chan is away: $A [Log/${CONFIG[AWAY_LOG] ? [ON] : [OFF]}]
			}
		}
	}

	@ AWAY.TIME = time()
	^assign MODINFO.AWAY.SET You are currently marked as being away.
}

/*
 * You have unset away.
 */
on #-305 421 "*"
{
	if (CONFIG[PUBLIC_AWAY] && AWAY[TIME])
	{
		@ :away_time = time() - AWAY.TIME

		if (CONFIG[PUBLIC_AWAY_CHANNELS])
		{
			for chan in ($CONFIG.PUBLIC_AWAY_CHANNELS)
			{
				if (match($chan $mychannels()))
				{
					describe $chan is back [Gone $tdiff($away_time)]
				}
			}
		}{
			for chan in ($mychannels())
			{
				describe $chan is back [Gone $tdiff($away_time)]
			}
		}
	}

	@ delarray(sent_away)
	^assign -AWAY.TIME
	^assign -MODINFO.AWAY.SET

	if (AWAY[NEWMSGS])
	{
		xecho -b You have $AWAY.NEWMSGS new message${AWAY[NEWMSGS] > 1 ? [s] : []}.
	}
}

/*
 * Update TS for last input and check for auto-unset-away.
 */
on #^input 421 "*"
{
	@ AWAY.LAST_INPUT = time()
	
	if (A && CONFIG[AUTO_UNSET_AWAY])
	{
		//away -a
	}
}

/*
 * Process incoming msgs and notices appropriately.
 */
on #-msg 421 "*"
{
	if (A)
	{
		@ away.log(MSG $userhost() $*)
		@ away.send_notice($0)
	}
}

on #-notice 421 "*"
{
	if (A)
	{
		@ away.log(NOTICE $userhost $*)
	}
}

/*
 * Set ourselves away if auto-away is enabled and we have been idle longer
 * than $CONFIG.AUTO_AWAY_TIME.
 */
on #^timer 421 "*"
{
	if (!A && CONFIG[AUTO_AWAY] && CONFIG[AUTO_AWAY_TIME] > 0)
	{
		@ :diff = time() - CONFIG[AUTO_AWAY_TIME]
		@ :minutes = CONFIG[AUTO_AWAY_TIME] / 60

		if (diff >= AWAY[LAST_INPUT])
		{
			//away -a Auto-away after $minutes minute${minutes > 1 ? [s] : []}.
		}
	}
}


/*
 * This handles the actual writing of messages to your logfile.
 * Returns 0 on success and > 0 on failure.
 */
alias away.log (type, userhost, nick, msg)
{
	if (!type || !userhost || !nick || !msg)
	{
		return 1
	}

	if (CONFIG[AWAY_LOG])
	{
		@ :fd = open($CONFIG.AWAY_LOGFILE W)

		if (fd != -1)
		{
			@ write($fd [$strftime(%x %X)] $type [$nick!$userhost] $msg)
			@ close($fd)
			@ AWAY.NEWMSGS++
		}{
			return 2
		}
	}

	return 0
}

/*
 * Notifies people that you are away if SEND_AWAY_NOTICE is true.
 */
alias away.send_notice (nick default "0", void)
{
	if (CONFIG[SEND_AWAY_NOTICE]  && finditem(sent_away $nick) < 0)
	{
		@ setitem(sent_away $numitems(sent_away) $nick)
		notice $nick I am currently away. \($A\) [Gone since: $strftime($AWAY.TIME %c)] [Log/${CONFIG[AWAY_LOG] ? [ON] : [OFF]}]
	}

	return
}


/* EOF */