/* $Id$ */
/*
 * save.dsc - Save config and format settings
 * Copyright (c) 2002 Brian Weiss
 * See the 'COPYRIGHT' file for more information.
 */

/****** USER ALIASES ******/

/*
 * /SAVE [-d <directory>] [*|modules]
 * Saves all settings for specified module(s) to either $DS.SAVE_DIR or a
 * directory specified with the -d option. If no modules are specified,
 * "*" (ALL) is assumed and the settings for every currently loaded module
 * will be saved. If "core" is given as a module name, the settings for the
 * core scripts will be saved.
 */
alias save (args) {
	^local modules,save_dir
	switch ($word(0 $args)) {
		(-d) {
			^local save_dir $twiddle($word(1 $args))
			^local args $restw(2 $args)
		}
		(*) {
			^local save_dir $twiddle($DS.SAVE_DIR)
		}
	}
	if (!args || word(0 $args) == [*]) {
		/* Save everything! */
		push modules core
		for cnt from 0 to ${numitems(loaded_modules) - 1} {
			push modules $getitem(loaded_modules $cnt)
		}
	} else {
		/* Save only what's specified by user */
		for module in ($args) {
			if (finditem(loaded_modules $module) > -1 || ascii($module) == ascii(core)) {
				push modules $module
			} else {
				echo Error: Unknown module: $module
			}
		}
	}	
	if (fexist($save_dir) == -1) {
		xecho -b No save directory found. Creating $save_dir
		if (mkdir($save_dir) > 0) {
			echo Error: Unable to create directory $save_dir
			echo Aborting save...
			return
		}
	}
	xecho -s -b Saving settings to $save_dir
	/* Save config settings (/DSET) */
	for module in ($modules) {
		switch ($save.write_config($save_dir $module)) {
			(0) { if (CONFIG.SAVE_VERBOSE) { xecho -s -b Settings for [$module] saved to $save_dir/$module\.sav; }}
			(1) { echo Error: save.write_config\(\): Not enough arguments \(Module: $module\); }
			(2) { echo Error: save.write_config\(\): Unable to open save file for writing \(Module: $module\); }
			(*) { echo Error: save.write_config\(\): Unknown \(Module: $module\); }
		}
	}
	/* Save format settings (/FSET) */
	switch ($save.write_formats($modules)) {
		(0) { if (CONFIG.SAVE_VERBOSE) { xecho -s -b Format settings saved to $DS.USER_DIR/themes/custom/; }}
		(1) { echo Error: save.write_formats\(\): Not enough arguments; }
		(2) { echo Error: save.write_formats\(\): Unable to open master theme file for writing; }
		(3) { echo Error: save.write_formats\(\): Unable to open one or more module theme files for writing; }
		(*) { echo Error: save.write_formats\(\): Unknown error; }
	}
	/* Save the current status bar settings */
	switch ($save.write_status()) {
		(0) { if (CONFIG.SAVE_VERBOSE) { xecho -s -b Status settings saved to $DS.USER_DIR/status/custom; }}
		(1) { echo Error: save.write_status\(\): Unable to open custom status file for writing; }
		(*) { echo Error: save.write_status\(\): Unknown error; }
	}
}


/****** INTERNAL ALIASES ******/

/*
 * Writes config settings to specified directory.
 * Returns 0 on success and > 0 on failure.
 */
alias save.write_config (save_dir, module, void) {
	if (!save_dir || !module) {
		return 1
	}
	^local save_file $save_dir/$module\.sav
	@ unlink($save_file)
	if ((:fd = open($save_file W)) == -1) {
		return 2
	}
	@ write($fd # Generated by DarkStar $DS.VERSION \($DS.INTERNAL_VERSION\): $strftime(%a %b %d %T %Z %Y))			
	@ write($fd)
	for var in ($aliasctl(assign get DSET.MODULES.$module)) {
		if ((:value = aliasctl(assign get CONFIG.$var)) != []) {
			@ write($fd assign CONFIG.$var $value)
		} else {
			@ write($fd assign -CONFIG.$var)
		}
	}
	@ close($fd)
	return 0
}

/*
 * Writes format settings to the "custom" theme in the user directory.
 * Returns 0 on success and > 0 on failure.
 */
alias save.write_formats (modules) {
	if (!modules) {
		return 1
	}
	^local save_dir $DS.USER_DIR/themes/custom
	if (fexist($save_dir) == -1) {
		@ mkdir($save_dir)
	}
	/* Write the master theme file, main.dst */
	^local save_file $save_dir\/main.dst
	@ unlink($save_file)
	if ((:fd = open($save_file W)) == -1) {
		return 2
	}
	@ write($fd # Generated by DarkStar $DS.VERSION \($DS.INTERNAL_VERSION\): $strftime(%a %b %d %T %Z %Y))
	@ write($fd)
	@ write($fd status -q $DS.SBAR)
	@ write($fd)
	@ write($fd set BANNER $BANNER)
	@ write($fd)
	if (:core_vars = aliasctl(assign get FSET.MODULES.CORE)) {
		for var in ($core_vars) {
			if ((:value = aliasctl(assign get FORMAT.$var)) != []) {
				@ write($fd assign FORMAT.$var $value)
			} else {
				@ write($fd assign -FORMAT.$var)
			}
		}
	}
	@ close($fd)
	/* Write the theme files for each specified module */
	for module in ($sar(i/core//$modules)) {
		if (:variables = aliasctl(assign get FSET.MODULES.$module)) {
			^local save_file $save_dir/$module
			@ unlink($save_file)
			if ((:fd = open($save_file W)) == -1) {
				return 3
			}
			@ write($fd # Module: $module)
			@ write($fd)
			for var in ($variables) {
				if ((:value = aliasctl(assign get FORMAT.$var)) != []) {
					@ write($fd assign FORMAT.$var $value)
				} else {
					@ write($fd assign -FORMAT.$var)
				}
			}
			@ close($fd)
		}
	}
	return 0
}

/*
 * Write the values of /SET STATUS* to $DS.USER_DIR/status/custom
 * Returns 0 on success and > 0 on failure.
 */
alias save.write_status (void) {
	^local fname $DS.USER_DIR/status/custom
	@ unlink($fname)
	if ((:fd = open($fname W)) == -1) {
		return 1
	}
	@ write($fd # Generated by DarkStar $DS.VERSION \($DS.INTERNAL_VERSION\): $strftime(%a %b %d %T %Z %Y))
	@ write($fd)
	if (STATUS.DOUBLE) {
		@ write($fd assign STATUS.DOUBLE 1)
	} else {
		@ write($fd assign -STATUS.DOUBLE)
	}
	@ write($fd)
	^local setvars = INPUT_PROMPT REVERSE_STATUS_LINE $getsets(STATUS*)
	for var in ($setvars) {
		if ($var) {
			@ write($fd set $var $($var))
		} else {
			@ write($fd set -$var)
		}
	}
	@ close($fd)
	return 0
}


/* EOF */