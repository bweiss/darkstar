/*
 *      _               _          _
 *   __| |  __ _  _ __ | | __ ___ | |_   __ _  _ __
 *  / _` | / _` || '__|| |/ // __|| __| / _` || '__|
 * | (_| || (_| || |   |   < \__ \| |_ | (_| || |
 *  \__,_| \__,_||_|   |_|\_\|___/ \__| \__,_||_|
 *
 *  Darkstar/EPIC4 by Brian Weiss <brian@epicsol.org>
 *
 *  For use with EPIC4-1.1 and higher.
 *  See the 'README' file for general information.
 *  See the 'COPYRIGHT' file for licensing information.
 */

/*
 * Warn user if client doesn't meet specifications
 */
if (!epic() || V < 20011112)
{
	xecho -b
	xecho -b WARNING!
	xecho -b
	xecho -b This script was intended for use with EPIC4-1.0 or higher.
	xecho -b Your client, $J, does not meet this requirement.
	xecho -b Continue to use this script at your own risk.
	xecho -b
	xecho -b If you would like to obtain EPIC4, you can visit one of the
	xecho -b following sites.
	xecho -b
	xecho -b Official EPIC Homepage:     http://www.epicsol.org/
	xecho -b Official EPIC FTP site:     ftp://ftp.epicsol.org/
	xecho -b
	xecho -b Current versions of both Darkstar and EPIC4 can also be found
	xecho -b at the following URL.
	xecho -b
	xecho -b http://www.got.net/~brian/epic4/
	xecho -b

	^local pause $"Press any key to continue, or 'q' to quit. "

	if (pause == [q])
	{
		xecho -b Bye!
		xecho -b
		//quit
	}
}


/*
 * Make sure we're clean
 */
dump all

do
{
	for array in ($getarrays())
	{
		@ delarray($array)
	}
}


/*
 * Important global variables
 */
assign DS.VERSION 0.0.13
assign DS.INTERNAL_VERSION 20011202


/*
 * Find out where everything is and store it in the DS structure.
 */
if (getenv(DARKSTAR_HOME))
{
	@ DS.HOME = getenv(DARKSTAR_HOME)
}{
	^assign DS.HOME ~/darkstar
}

if (getenv(DARKSTAR_USER))
{
	@ DS.USER = getenv(DARKSTAR_USER)
}{
	^assign DS.USER ~/.darkstar
}

if (getenv(DARKSTAR_RC))
{
	@ DS.RC = getenv(DARKSTAR_RC)
}{
	^assign DS.RC ~/.dsrc
}

eval assign DS.DEF $DS.HOME/def
eval assign DS.HELP $DS.HOME/help
eval assign DS.MODULES $DS.HOME/modules $DS.USER/modules
eval assign DS.STATUS $DS.HOME/status $DS.USER/status
eval assign DS.THEMES $DS.HOME/themes $DS.USER/themes
eval assign DS.SAVE $DS.USER/save

if (fexist($DS.USER) == -1)
{
	xecho -b Creating user directory: $DS.USER
	@ mkdir($DS.USER)
	@ mkdir($DS.USER/def)
	@ mkdir($DS.USER/modules)
	@ mkdir($DS.USER/status)
	@ mkdir($DS.USER/themes)
	@ mkdir($DS.USER/save)
}


/* 
 * Important /SET's
 * If you want to change these, it should be done via .dsrc
 */
eval set CLIENT_INFORMATION Darkstar $DS.VERSION
set -CONTINUED_LINE
set CONTROL_C_COLOR ON
set DISPLAY_PC_CHARACTERS 4
set HIGH_BIT_ESCAPE 0
set INDENT ON


/*
 * Grab the default settings for the core scripts
 */
do
{
	^local file $DS.HOME/def/core.def

	if (fexist($file) != -1)
	{
		@ :fd = open($file R)
	
		while (!eof($fd))
		{
			@ :line = read($fd)
			@ :type = word(0 $line)
			@ :variable = word(1 $line)
			@ :value = restw(2 $line)
                                    		
			switch ($type)
			{
				(dset)
				(config)
				{
					if (word(1 $line) == [bool])
					{
						@ variable = word(2 $line)
						@ value = restw(3 $line)
					
						^assign DSET.BOOL.$variable 1
					}
				
					@ push(DSET.CORE $variable)
					^assign DSET.CONFIG.$variable 1
					^assign CONFIG.$variable $value
				}

				(fset)
				(format)
				{
					@ push(FSET.CORE $variable)
					^assign FSET.FORMAT.$variable 1
					^assign FORMAT.$variable $value
				}
			}
		}
	
		@ close($fd)
	}{
		xecho -b ERROR: $file not found.
	}
}


/*
 * Load saved core settings.
 */
if (fexist($DS.SAVE/core.sav) == 1)
{
	load $DS.SAVE/core.sav
}


/*
 * Load the rest of the core scripts
 */
eval load $DS.HOME/core/functions.dsc
eval load $DS.HOME/core/commands.dsc
eval load $DS.HOME/core/config.dsc
eval load $DS.HOME/core/save.dsc
eval load $DS.HOME/core/status.dsc
eval load $DS.HOME/core/themes.dsc
eval load $DS.HOME/core/help.dsc
eval load $DS.HOME/core/loader.dsc


/*
 * Load rcfile if found.
 */
if (fexist($DS.RC) == 1)
{
	load $DS.RC
}

      
/*
 * Some useful aliases
 */
alias reload (void)
{
	@ :home = DS.HOME
	
	timer -del all

	for cnt from 1 to $numitems(loaded_modules)
	{
		@ :itm = cnt - 1
		queue -flush cleanup.$getitem(loaded_modules $itm)
	}
	
	^load $home/darkstar.irc
}

alias sv (whom default "$C", void)
{
	msg $whom ircII $J $uname() - $CLIENT_INFORMATION
}

alias uptime (void)
{
	xecho -b ircII $J $uname() - $CLIENT_INFORMATION
	xecho -b Uptime: $tdiff(${time() - F})
}


/* bmw '01 */